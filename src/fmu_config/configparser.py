import pprint
import re
import getpass
import socket
from datetime import datetime

import yaml
import xtgeo

from ._loader import Loader

# just borrow a few useful things from xtgeo
xxx = xtgeo.common.XTGeoDialog()
logger = xxx.functionlogger(__name__)


class ConfigParser(object):
    """Class for parsing config files for FMU."""

    def __init__(self):

        self._config = {}
        self._yamlfile = None

    @property
    def config(self):
        return self._config

    @property
    def yamlfile(self):
        return self._yamlfile

    def parse(self, yfile):
        """Parsing the YAML file (reading it)."""

        with open(yfile, 'r') as stream:
            self._config = yaml.load(stream, Loader=Loader)
        self._yamlfile = yfile

    @staticmethod
    def _get_tmpl_form(stream):
        """Given variables..."""

        pattern = '[a-zA-Z0-9.]+~'

        if isinstance(stream, list):
            logger.info('STREAM is a list object')
            result = []
            for item in stream:
                moditem = re.sub(pattern, '', item)
                moditem = re.sub('"', '', moditem)
                result.append(moditem)
        else:
            result = re.sub(pattern, '', stream)
            result = re.sub('"', '', result)

        return result

    @staticmethod
    def _get_dest_form(stream):
        """Given variables..."""

        if isinstance(stream, list):
            logger.info('STREAM is a list object')
            result = []
            for item in stream:
                moditem = re.sub('\~.*>', '', item)
                result.append(moditem)
        else:
            result = re.sub('\~.*>', '', stream)

        return result

    def show(self):
        """Show the current configuration using prettyprinter"""

        pp = pprint.PrettyPrinter(indent=4)

        pp.pprint(self.config)

    def to_ipl(self):
        """Export the config as a global variables IPL and template."""

        cfg = self.config['rms']

        destfile = cfg['ipldestfile']
        tmplfile = cfg['ipltmplfile']

        declarations = []
        expressions = []

        host = socket.gethostname()
        user = getpass.getuser()
        now = str(datetime.now())

        metadata = ['// global_variables.xxxx\n',
                    '// This file is AUTOGENERATED. DO NOT EDIT MANUALLY!\n',
                    '// User is {}\n'.format(user),
                    '// Date is right {}\n'.format(now),
                    '// Machine is {}\n'.format(host)]

        declarations.extend(metadata)

        hdecl, hlist = self._ipl_stringlist_format('horizons')
        if hdecl is not None:
            declarations.extend(hdecl)
            expressions.extend(hlist)

        hdecl, hlist = self._ipl_stringlist_format('zones')
        if hdecl is not None:
            declarations.extend(hdecl)
            expressions.extend(hlist)

        hdecl, hlist = self._ipl_freeform_format()
        if hdecl is not None:
            declarations.extend(hdecl)
            expressions.extend(hlist)

        expressions_dest = self._get_dest_form(expressions)
        expressions_tmpl = self._get_tmpl_form(expressions)

        with open(destfile, 'w') as stream:
            for line in declarations:
                stream.write(line)

            for line in expressions_dest:
                stream.write(line)

        with open(tmplfile, 'w') as stream:
            for line in declarations:
                stream.write(line)

            for line in expressions_tmpl:
                stream.write(line)

    def _ipl_stringlist_format(self, subtype):
        """Process the rms horizons etc, and return declarations and values."""

        cfg = self.config['rms'].get(subtype)
        if cfg is None:
            return None, None

        decl = []
        expr = []
        for variable in cfg:
            mydecl = 'String {}[]\n'.format(variable)
            decl.append(mydecl)

            array = cfg[variable]
            for i, element in enumerate(array):
                mylist = '{}[{}] = "{}"\n'.format(variable, i + 1, element)
                expr.append(mylist)

        expr.append('\n')

        return decl, expr

    def _ipl_freeform_format(self):
        """Process the RMS IPL YAML config freeform types."""

        decl = ['// Declare free form:\n']
        expr = ['// Free form expressions:\n']

        cfg = self.config['rms'].get('freeform')
        if cfg is None:
            return None, None

        for variable in cfg:
            print(variable)
            mydtype = cfg[variable]['dtype']
            if 'str' in mydtype:
                subtype = 'String'
            elif 'int' in mydtype:
                subtype = 'Int'
            elif 'float' in mydtype:
                subtype = 'Float'
            else:
                raise ValueError('Do not understand dtype: {}'.format(mydtype))

            listtype = ''
            if cfg[variable].get('list', False):
                listtype = '[]'

            mydecl = '{} {}{}\n'.format(subtype, variable, listtype)
            decl.append(mydecl)

            myvalue = cfg[variable].get('value')
            myvalues = cfg[variable].get('values')
            if myvalue:
                fnutt = ''
                if subtype == 'String':
                    fnutt = '"'
                myexpr = '{} = {}{}{}\n'.format(variable, fnutt, myvalue,
                                                fnutt)
                expr.append(myexpr)
            elif myvalues:
                for i, val in enumerate(myvalues):
                    fnutt = ''
                    if subtype == 'String':
                        fnutt = '"'
                    myexpr = '{}[{}] = {}{}{}\n'.format(variable, i + 1,
                                                        fnutt, val, fnutt)
                    expr.append(myexpr)

        return decl, expr

    def to_eclipse(self):
        """Export the config templates and actuals under `eclipse`"""

        cfg = self.config

        for deck in cfg['eclipse']:
            logger.info('Deck is {}'.format(deck))
            edeck = cfg['eclipse'][deck]

            content = edeck['content']
            content_dest = self._get_dest_form(content)
            content_tmpl = self._get_tmpl_form(content)
            logger.info(content_dest)
            logger.info(content_tmpl)

            with open(edeck['destfile'], 'w') as dest:
                dest.write(content_dest)

            with open(edeck['tmplfile'], 'w') as tmpl:
                tmpl.write(content_tmpl)
